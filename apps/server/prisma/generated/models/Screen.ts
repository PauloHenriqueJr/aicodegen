
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Screen` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Screen
 * 
 */
export type ScreenModel = runtime.Types.Result.DefaultSelection<Prisma.$ScreenPayload>

export type AggregateScreen = {
  _count: ScreenCountAggregateOutputType | null
  _avg: ScreenAvgAggregateOutputType | null
  _sum: ScreenSumAggregateOutputType | null
  _min: ScreenMinAggregateOutputType | null
  _max: ScreenMaxAggregateOutputType | null
}

export type ScreenAvgAggregateOutputType = {
  width: number | null
  height: number | null
  x: number | null
  y: number | null
}

export type ScreenSumAggregateOutputType = {
  width: number | null
  height: number | null
  x: number | null
  y: number | null
}

export type ScreenMinAggregateOutputType = {
  id: string | null
  projectId: string | null
  name: string | null
  type: $Enums.DeviceType | null
  width: number | null
  height: number | null
  x: number | null
  y: number | null
  imageUrl: string | null
  route: string | null
  component: string | null
  isGenerated: boolean | null
  metadata: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ScreenMaxAggregateOutputType = {
  id: string | null
  projectId: string | null
  name: string | null
  type: $Enums.DeviceType | null
  width: number | null
  height: number | null
  x: number | null
  y: number | null
  imageUrl: string | null
  route: string | null
  component: string | null
  isGenerated: boolean | null
  metadata: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ScreenCountAggregateOutputType = {
  id: number
  projectId: number
  name: number
  type: number
  width: number
  height: number
  x: number
  y: number
  imageUrl: number
  route: number
  component: number
  isGenerated: number
  metadata: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ScreenAvgAggregateInputType = {
  width?: true
  height?: true
  x?: true
  y?: true
}

export type ScreenSumAggregateInputType = {
  width?: true
  height?: true
  x?: true
  y?: true
}

export type ScreenMinAggregateInputType = {
  id?: true
  projectId?: true
  name?: true
  type?: true
  width?: true
  height?: true
  x?: true
  y?: true
  imageUrl?: true
  route?: true
  component?: true
  isGenerated?: true
  metadata?: true
  createdAt?: true
  updatedAt?: true
}

export type ScreenMaxAggregateInputType = {
  id?: true
  projectId?: true
  name?: true
  type?: true
  width?: true
  height?: true
  x?: true
  y?: true
  imageUrl?: true
  route?: true
  component?: true
  isGenerated?: true
  metadata?: true
  createdAt?: true
  updatedAt?: true
}

export type ScreenCountAggregateInputType = {
  id?: true
  projectId?: true
  name?: true
  type?: true
  width?: true
  height?: true
  x?: true
  y?: true
  imageUrl?: true
  route?: true
  component?: true
  isGenerated?: true
  metadata?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ScreenAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Screen to aggregate.
   */
  where?: Prisma.ScreenWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Screens to fetch.
   */
  orderBy?: Prisma.ScreenOrderByWithRelationInput | Prisma.ScreenOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ScreenWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Screens from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Screens.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Screens
  **/
  _count?: true | ScreenCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ScreenAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ScreenSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ScreenMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ScreenMaxAggregateInputType
}

export type GetScreenAggregateType<T extends ScreenAggregateArgs> = {
      [P in keyof T & keyof AggregateScreen]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateScreen[P]>
    : Prisma.GetScalarType<T[P], AggregateScreen[P]>
}




export type ScreenGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ScreenWhereInput
  orderBy?: Prisma.ScreenOrderByWithAggregationInput | Prisma.ScreenOrderByWithAggregationInput[]
  by: Prisma.ScreenScalarFieldEnum[] | Prisma.ScreenScalarFieldEnum
  having?: Prisma.ScreenScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ScreenCountAggregateInputType | true
  _avg?: ScreenAvgAggregateInputType
  _sum?: ScreenSumAggregateInputType
  _min?: ScreenMinAggregateInputType
  _max?: ScreenMaxAggregateInputType
}

export type ScreenGroupByOutputType = {
  id: string
  projectId: string
  name: string
  type: $Enums.DeviceType
  width: number
  height: number
  x: number
  y: number
  imageUrl: string | null
  route: string | null
  component: string | null
  isGenerated: boolean
  metadata: string | null
  createdAt: Date
  updatedAt: Date
  _count: ScreenCountAggregateOutputType | null
  _avg: ScreenAvgAggregateOutputType | null
  _sum: ScreenSumAggregateOutputType | null
  _min: ScreenMinAggregateOutputType | null
  _max: ScreenMaxAggregateOutputType | null
}

type GetScreenGroupByPayload<T extends ScreenGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ScreenGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ScreenGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ScreenGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ScreenGroupByOutputType[P]>
      }
    >
  >



export type ScreenWhereInput = {
  AND?: Prisma.ScreenWhereInput | Prisma.ScreenWhereInput[]
  OR?: Prisma.ScreenWhereInput[]
  NOT?: Prisma.ScreenWhereInput | Prisma.ScreenWhereInput[]
  id?: Prisma.StringFilter<"Screen"> | string
  projectId?: Prisma.StringFilter<"Screen"> | string
  name?: Prisma.StringFilter<"Screen"> | string
  type?: Prisma.EnumDeviceTypeFilter<"Screen"> | $Enums.DeviceType
  width?: Prisma.IntFilter<"Screen"> | number
  height?: Prisma.IntFilter<"Screen"> | number
  x?: Prisma.FloatFilter<"Screen"> | number
  y?: Prisma.FloatFilter<"Screen"> | number
  imageUrl?: Prisma.StringNullableFilter<"Screen"> | string | null
  route?: Prisma.StringNullableFilter<"Screen"> | string | null
  component?: Prisma.StringNullableFilter<"Screen"> | string | null
  isGenerated?: Prisma.BoolFilter<"Screen"> | boolean
  metadata?: Prisma.StringNullableFilter<"Screen"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Screen"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Screen"> | Date | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
}

export type ScreenOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  x?: Prisma.SortOrder
  y?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  route?: Prisma.SortOrderInput | Prisma.SortOrder
  component?: Prisma.SortOrderInput | Prisma.SortOrder
  isGenerated?: Prisma.SortOrder
  metadata?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  project?: Prisma.ProjectOrderByWithRelationInput
}

export type ScreenWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ScreenWhereInput | Prisma.ScreenWhereInput[]
  OR?: Prisma.ScreenWhereInput[]
  NOT?: Prisma.ScreenWhereInput | Prisma.ScreenWhereInput[]
  projectId?: Prisma.StringFilter<"Screen"> | string
  name?: Prisma.StringFilter<"Screen"> | string
  type?: Prisma.EnumDeviceTypeFilter<"Screen"> | $Enums.DeviceType
  width?: Prisma.IntFilter<"Screen"> | number
  height?: Prisma.IntFilter<"Screen"> | number
  x?: Prisma.FloatFilter<"Screen"> | number
  y?: Prisma.FloatFilter<"Screen"> | number
  imageUrl?: Prisma.StringNullableFilter<"Screen"> | string | null
  route?: Prisma.StringNullableFilter<"Screen"> | string | null
  component?: Prisma.StringNullableFilter<"Screen"> | string | null
  isGenerated?: Prisma.BoolFilter<"Screen"> | boolean
  metadata?: Prisma.StringNullableFilter<"Screen"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Screen"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Screen"> | Date | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
}, "id">

export type ScreenOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  x?: Prisma.SortOrder
  y?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  route?: Prisma.SortOrderInput | Prisma.SortOrder
  component?: Prisma.SortOrderInput | Prisma.SortOrder
  isGenerated?: Prisma.SortOrder
  metadata?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ScreenCountOrderByAggregateInput
  _avg?: Prisma.ScreenAvgOrderByAggregateInput
  _max?: Prisma.ScreenMaxOrderByAggregateInput
  _min?: Prisma.ScreenMinOrderByAggregateInput
  _sum?: Prisma.ScreenSumOrderByAggregateInput
}

export type ScreenScalarWhereWithAggregatesInput = {
  AND?: Prisma.ScreenScalarWhereWithAggregatesInput | Prisma.ScreenScalarWhereWithAggregatesInput[]
  OR?: Prisma.ScreenScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ScreenScalarWhereWithAggregatesInput | Prisma.ScreenScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Screen"> | string
  projectId?: Prisma.StringWithAggregatesFilter<"Screen"> | string
  name?: Prisma.StringWithAggregatesFilter<"Screen"> | string
  type?: Prisma.EnumDeviceTypeWithAggregatesFilter<"Screen"> | $Enums.DeviceType
  width?: Prisma.IntWithAggregatesFilter<"Screen"> | number
  height?: Prisma.IntWithAggregatesFilter<"Screen"> | number
  x?: Prisma.FloatWithAggregatesFilter<"Screen"> | number
  y?: Prisma.FloatWithAggregatesFilter<"Screen"> | number
  imageUrl?: Prisma.StringNullableWithAggregatesFilter<"Screen"> | string | null
  route?: Prisma.StringNullableWithAggregatesFilter<"Screen"> | string | null
  component?: Prisma.StringNullableWithAggregatesFilter<"Screen"> | string | null
  isGenerated?: Prisma.BoolWithAggregatesFilter<"Screen"> | boolean
  metadata?: Prisma.StringNullableWithAggregatesFilter<"Screen"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Screen"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Screen"> | Date | string
}

export type ScreenCreateInput = {
  id?: string
  name: string
  type: $Enums.DeviceType
  width: number
  height: number
  x: number
  y: number
  imageUrl?: string | null
  route?: string | null
  component?: string | null
  isGenerated?: boolean
  metadata?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  project: Prisma.ProjectCreateNestedOneWithoutScreensInput
}

export type ScreenUncheckedCreateInput = {
  id?: string
  projectId: string
  name: string
  type: $Enums.DeviceType
  width: number
  height: number
  x: number
  y: number
  imageUrl?: string | null
  route?: string | null
  component?: string | null
  isGenerated?: boolean
  metadata?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ScreenUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  x?: Prisma.FloatFieldUpdateOperationsInput | number
  y?: Prisma.FloatFieldUpdateOperationsInput | number
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  route?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  component?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isGenerated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneRequiredWithoutScreensNestedInput
}

export type ScreenUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  x?: Prisma.FloatFieldUpdateOperationsInput | number
  y?: Prisma.FloatFieldUpdateOperationsInput | number
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  route?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  component?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isGenerated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ScreenCreateManyInput = {
  id?: string
  projectId: string
  name: string
  type: $Enums.DeviceType
  width: number
  height: number
  x: number
  y: number
  imageUrl?: string | null
  route?: string | null
  component?: string | null
  isGenerated?: boolean
  metadata?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ScreenUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  x?: Prisma.FloatFieldUpdateOperationsInput | number
  y?: Prisma.FloatFieldUpdateOperationsInput | number
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  route?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  component?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isGenerated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ScreenUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  x?: Prisma.FloatFieldUpdateOperationsInput | number
  y?: Prisma.FloatFieldUpdateOperationsInput | number
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  route?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  component?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isGenerated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ScreenListRelationFilter = {
  every?: Prisma.ScreenWhereInput
  some?: Prisma.ScreenWhereInput
  none?: Prisma.ScreenWhereInput
}

export type ScreenOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ScreenCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  x?: Prisma.SortOrder
  y?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  route?: Prisma.SortOrder
  component?: Prisma.SortOrder
  isGenerated?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ScreenAvgOrderByAggregateInput = {
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  x?: Prisma.SortOrder
  y?: Prisma.SortOrder
}

export type ScreenMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  x?: Prisma.SortOrder
  y?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  route?: Prisma.SortOrder
  component?: Prisma.SortOrder
  isGenerated?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ScreenMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  type?: Prisma.SortOrder
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  x?: Prisma.SortOrder
  y?: Prisma.SortOrder
  imageUrl?: Prisma.SortOrder
  route?: Prisma.SortOrder
  component?: Prisma.SortOrder
  isGenerated?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ScreenSumOrderByAggregateInput = {
  width?: Prisma.SortOrder
  height?: Prisma.SortOrder
  x?: Prisma.SortOrder
  y?: Prisma.SortOrder
}

export type ScreenCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.ScreenCreateWithoutProjectInput, Prisma.ScreenUncheckedCreateWithoutProjectInput> | Prisma.ScreenCreateWithoutProjectInput[] | Prisma.ScreenUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ScreenCreateOrConnectWithoutProjectInput | Prisma.ScreenCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.ScreenCreateManyProjectInputEnvelope
  connect?: Prisma.ScreenWhereUniqueInput | Prisma.ScreenWhereUniqueInput[]
}

export type ScreenUncheckedCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.ScreenCreateWithoutProjectInput, Prisma.ScreenUncheckedCreateWithoutProjectInput> | Prisma.ScreenCreateWithoutProjectInput[] | Prisma.ScreenUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ScreenCreateOrConnectWithoutProjectInput | Prisma.ScreenCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.ScreenCreateManyProjectInputEnvelope
  connect?: Prisma.ScreenWhereUniqueInput | Prisma.ScreenWhereUniqueInput[]
}

export type ScreenUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.ScreenCreateWithoutProjectInput, Prisma.ScreenUncheckedCreateWithoutProjectInput> | Prisma.ScreenCreateWithoutProjectInput[] | Prisma.ScreenUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ScreenCreateOrConnectWithoutProjectInput | Prisma.ScreenCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.ScreenUpsertWithWhereUniqueWithoutProjectInput | Prisma.ScreenUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.ScreenCreateManyProjectInputEnvelope
  set?: Prisma.ScreenWhereUniqueInput | Prisma.ScreenWhereUniqueInput[]
  disconnect?: Prisma.ScreenWhereUniqueInput | Prisma.ScreenWhereUniqueInput[]
  delete?: Prisma.ScreenWhereUniqueInput | Prisma.ScreenWhereUniqueInput[]
  connect?: Prisma.ScreenWhereUniqueInput | Prisma.ScreenWhereUniqueInput[]
  update?: Prisma.ScreenUpdateWithWhereUniqueWithoutProjectInput | Prisma.ScreenUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.ScreenUpdateManyWithWhereWithoutProjectInput | Prisma.ScreenUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.ScreenScalarWhereInput | Prisma.ScreenScalarWhereInput[]
}

export type ScreenUncheckedUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.ScreenCreateWithoutProjectInput, Prisma.ScreenUncheckedCreateWithoutProjectInput> | Prisma.ScreenCreateWithoutProjectInput[] | Prisma.ScreenUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ScreenCreateOrConnectWithoutProjectInput | Prisma.ScreenCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.ScreenUpsertWithWhereUniqueWithoutProjectInput | Prisma.ScreenUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.ScreenCreateManyProjectInputEnvelope
  set?: Prisma.ScreenWhereUniqueInput | Prisma.ScreenWhereUniqueInput[]
  disconnect?: Prisma.ScreenWhereUniqueInput | Prisma.ScreenWhereUniqueInput[]
  delete?: Prisma.ScreenWhereUniqueInput | Prisma.ScreenWhereUniqueInput[]
  connect?: Prisma.ScreenWhereUniqueInput | Prisma.ScreenWhereUniqueInput[]
  update?: Prisma.ScreenUpdateWithWhereUniqueWithoutProjectInput | Prisma.ScreenUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.ScreenUpdateManyWithWhereWithoutProjectInput | Prisma.ScreenUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.ScreenScalarWhereInput | Prisma.ScreenScalarWhereInput[]
}

export type EnumDeviceTypeFieldUpdateOperationsInput = {
  set?: $Enums.DeviceType
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type ScreenCreateWithoutProjectInput = {
  id?: string
  name: string
  type: $Enums.DeviceType
  width: number
  height: number
  x: number
  y: number
  imageUrl?: string | null
  route?: string | null
  component?: string | null
  isGenerated?: boolean
  metadata?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ScreenUncheckedCreateWithoutProjectInput = {
  id?: string
  name: string
  type: $Enums.DeviceType
  width: number
  height: number
  x: number
  y: number
  imageUrl?: string | null
  route?: string | null
  component?: string | null
  isGenerated?: boolean
  metadata?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ScreenCreateOrConnectWithoutProjectInput = {
  where: Prisma.ScreenWhereUniqueInput
  create: Prisma.XOR<Prisma.ScreenCreateWithoutProjectInput, Prisma.ScreenUncheckedCreateWithoutProjectInput>
}

export type ScreenCreateManyProjectInputEnvelope = {
  data: Prisma.ScreenCreateManyProjectInput | Prisma.ScreenCreateManyProjectInput[]
  skipDuplicates?: boolean
}

export type ScreenUpsertWithWhereUniqueWithoutProjectInput = {
  where: Prisma.ScreenWhereUniqueInput
  update: Prisma.XOR<Prisma.ScreenUpdateWithoutProjectInput, Prisma.ScreenUncheckedUpdateWithoutProjectInput>
  create: Prisma.XOR<Prisma.ScreenCreateWithoutProjectInput, Prisma.ScreenUncheckedCreateWithoutProjectInput>
}

export type ScreenUpdateWithWhereUniqueWithoutProjectInput = {
  where: Prisma.ScreenWhereUniqueInput
  data: Prisma.XOR<Prisma.ScreenUpdateWithoutProjectInput, Prisma.ScreenUncheckedUpdateWithoutProjectInput>
}

export type ScreenUpdateManyWithWhereWithoutProjectInput = {
  where: Prisma.ScreenScalarWhereInput
  data: Prisma.XOR<Prisma.ScreenUpdateManyMutationInput, Prisma.ScreenUncheckedUpdateManyWithoutProjectInput>
}

export type ScreenScalarWhereInput = {
  AND?: Prisma.ScreenScalarWhereInput | Prisma.ScreenScalarWhereInput[]
  OR?: Prisma.ScreenScalarWhereInput[]
  NOT?: Prisma.ScreenScalarWhereInput | Prisma.ScreenScalarWhereInput[]
  id?: Prisma.StringFilter<"Screen"> | string
  projectId?: Prisma.StringFilter<"Screen"> | string
  name?: Prisma.StringFilter<"Screen"> | string
  type?: Prisma.EnumDeviceTypeFilter<"Screen"> | $Enums.DeviceType
  width?: Prisma.IntFilter<"Screen"> | number
  height?: Prisma.IntFilter<"Screen"> | number
  x?: Prisma.FloatFilter<"Screen"> | number
  y?: Prisma.FloatFilter<"Screen"> | number
  imageUrl?: Prisma.StringNullableFilter<"Screen"> | string | null
  route?: Prisma.StringNullableFilter<"Screen"> | string | null
  component?: Prisma.StringNullableFilter<"Screen"> | string | null
  isGenerated?: Prisma.BoolFilter<"Screen"> | boolean
  metadata?: Prisma.StringNullableFilter<"Screen"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Screen"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Screen"> | Date | string
}

export type ScreenCreateManyProjectInput = {
  id?: string
  name: string
  type: $Enums.DeviceType
  width: number
  height: number
  x: number
  y: number
  imageUrl?: string | null
  route?: string | null
  component?: string | null
  isGenerated?: boolean
  metadata?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ScreenUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  x?: Prisma.FloatFieldUpdateOperationsInput | number
  y?: Prisma.FloatFieldUpdateOperationsInput | number
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  route?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  component?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isGenerated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ScreenUncheckedUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  x?: Prisma.FloatFieldUpdateOperationsInput | number
  y?: Prisma.FloatFieldUpdateOperationsInput | number
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  route?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  component?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isGenerated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ScreenUncheckedUpdateManyWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
  width?: Prisma.IntFieldUpdateOperationsInput | number
  height?: Prisma.IntFieldUpdateOperationsInput | number
  x?: Prisma.FloatFieldUpdateOperationsInput | number
  y?: Prisma.FloatFieldUpdateOperationsInput | number
  imageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  route?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  component?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isGenerated?: Prisma.BoolFieldUpdateOperationsInput | boolean
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ScreenSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  projectId?: boolean
  name?: boolean
  type?: boolean
  width?: boolean
  height?: boolean
  x?: boolean
  y?: boolean
  imageUrl?: boolean
  route?: boolean
  component?: boolean
  isGenerated?: boolean
  metadata?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}, ExtArgs["result"]["screen"]>

export type ScreenSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  projectId?: boolean
  name?: boolean
  type?: boolean
  width?: boolean
  height?: boolean
  x?: boolean
  y?: boolean
  imageUrl?: boolean
  route?: boolean
  component?: boolean
  isGenerated?: boolean
  metadata?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}, ExtArgs["result"]["screen"]>

export type ScreenSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  projectId?: boolean
  name?: boolean
  type?: boolean
  width?: boolean
  height?: boolean
  x?: boolean
  y?: boolean
  imageUrl?: boolean
  route?: boolean
  component?: boolean
  isGenerated?: boolean
  metadata?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}, ExtArgs["result"]["screen"]>

export type ScreenSelectScalar = {
  id?: boolean
  projectId?: boolean
  name?: boolean
  type?: boolean
  width?: boolean
  height?: boolean
  x?: boolean
  y?: boolean
  imageUrl?: boolean
  route?: boolean
  component?: boolean
  isGenerated?: boolean
  metadata?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ScreenOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "projectId" | "name" | "type" | "width" | "height" | "x" | "y" | "imageUrl" | "route" | "component" | "isGenerated" | "metadata" | "createdAt" | "updatedAt", ExtArgs["result"]["screen"]>
export type ScreenInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}
export type ScreenIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}
export type ScreenIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}

export type $ScreenPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Screen"
  objects: {
    project: Prisma.$ProjectPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    projectId: string
    name: string
    type: $Enums.DeviceType
    width: number
    height: number
    x: number
    y: number
    imageUrl: string | null
    route: string | null
    component: string | null
    isGenerated: boolean
    metadata: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["screen"]>
  composites: {}
}

export type ScreenGetPayload<S extends boolean | null | undefined | ScreenDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ScreenPayload, S>

export type ScreenCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ScreenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ScreenCountAggregateInputType | true
  }

export interface ScreenDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Screen'], meta: { name: 'Screen' } }
  /**
   * Find zero or one Screen that matches the filter.
   * @param {ScreenFindUniqueArgs} args - Arguments to find a Screen
   * @example
   * // Get one Screen
   * const screen = await prisma.screen.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ScreenFindUniqueArgs>(args: Prisma.SelectSubset<T, ScreenFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ScreenClient<runtime.Types.Result.GetResult<Prisma.$ScreenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Screen that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ScreenFindUniqueOrThrowArgs} args - Arguments to find a Screen
   * @example
   * // Get one Screen
   * const screen = await prisma.screen.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ScreenFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ScreenFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ScreenClient<runtime.Types.Result.GetResult<Prisma.$ScreenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Screen that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScreenFindFirstArgs} args - Arguments to find a Screen
   * @example
   * // Get one Screen
   * const screen = await prisma.screen.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ScreenFindFirstArgs>(args?: Prisma.SelectSubset<T, ScreenFindFirstArgs<ExtArgs>>): Prisma.Prisma__ScreenClient<runtime.Types.Result.GetResult<Prisma.$ScreenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Screen that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScreenFindFirstOrThrowArgs} args - Arguments to find a Screen
   * @example
   * // Get one Screen
   * const screen = await prisma.screen.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ScreenFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ScreenFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ScreenClient<runtime.Types.Result.GetResult<Prisma.$ScreenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Screens that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScreenFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Screens
   * const screens = await prisma.screen.findMany()
   * 
   * // Get first 10 Screens
   * const screens = await prisma.screen.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const screenWithIdOnly = await prisma.screen.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ScreenFindManyArgs>(args?: Prisma.SelectSubset<T, ScreenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScreenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Screen.
   * @param {ScreenCreateArgs} args - Arguments to create a Screen.
   * @example
   * // Create one Screen
   * const Screen = await prisma.screen.create({
   *   data: {
   *     // ... data to create a Screen
   *   }
   * })
   * 
   */
  create<T extends ScreenCreateArgs>(args: Prisma.SelectSubset<T, ScreenCreateArgs<ExtArgs>>): Prisma.Prisma__ScreenClient<runtime.Types.Result.GetResult<Prisma.$ScreenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Screens.
   * @param {ScreenCreateManyArgs} args - Arguments to create many Screens.
   * @example
   * // Create many Screens
   * const screen = await prisma.screen.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ScreenCreateManyArgs>(args?: Prisma.SelectSubset<T, ScreenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Screens and returns the data saved in the database.
   * @param {ScreenCreateManyAndReturnArgs} args - Arguments to create many Screens.
   * @example
   * // Create many Screens
   * const screen = await prisma.screen.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Screens and only return the `id`
   * const screenWithIdOnly = await prisma.screen.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ScreenCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ScreenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScreenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Screen.
   * @param {ScreenDeleteArgs} args - Arguments to delete one Screen.
   * @example
   * // Delete one Screen
   * const Screen = await prisma.screen.delete({
   *   where: {
   *     // ... filter to delete one Screen
   *   }
   * })
   * 
   */
  delete<T extends ScreenDeleteArgs>(args: Prisma.SelectSubset<T, ScreenDeleteArgs<ExtArgs>>): Prisma.Prisma__ScreenClient<runtime.Types.Result.GetResult<Prisma.$ScreenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Screen.
   * @param {ScreenUpdateArgs} args - Arguments to update one Screen.
   * @example
   * // Update one Screen
   * const screen = await prisma.screen.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ScreenUpdateArgs>(args: Prisma.SelectSubset<T, ScreenUpdateArgs<ExtArgs>>): Prisma.Prisma__ScreenClient<runtime.Types.Result.GetResult<Prisma.$ScreenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Screens.
   * @param {ScreenDeleteManyArgs} args - Arguments to filter Screens to delete.
   * @example
   * // Delete a few Screens
   * const { count } = await prisma.screen.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ScreenDeleteManyArgs>(args?: Prisma.SelectSubset<T, ScreenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Screens.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScreenUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Screens
   * const screen = await prisma.screen.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ScreenUpdateManyArgs>(args: Prisma.SelectSubset<T, ScreenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Screens and returns the data updated in the database.
   * @param {ScreenUpdateManyAndReturnArgs} args - Arguments to update many Screens.
   * @example
   * // Update many Screens
   * const screen = await prisma.screen.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Screens and only return the `id`
   * const screenWithIdOnly = await prisma.screen.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ScreenUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ScreenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScreenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Screen.
   * @param {ScreenUpsertArgs} args - Arguments to update or create a Screen.
   * @example
   * // Update or create a Screen
   * const screen = await prisma.screen.upsert({
   *   create: {
   *     // ... data to create a Screen
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Screen we want to update
   *   }
   * })
   */
  upsert<T extends ScreenUpsertArgs>(args: Prisma.SelectSubset<T, ScreenUpsertArgs<ExtArgs>>): Prisma.Prisma__ScreenClient<runtime.Types.Result.GetResult<Prisma.$ScreenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Screens.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScreenCountArgs} args - Arguments to filter Screens to count.
   * @example
   * // Count the number of Screens
   * const count = await prisma.screen.count({
   *   where: {
   *     // ... the filter for the Screens we want to count
   *   }
   * })
  **/
  count<T extends ScreenCountArgs>(
    args?: Prisma.Subset<T, ScreenCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ScreenCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Screen.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScreenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ScreenAggregateArgs>(args: Prisma.Subset<T, ScreenAggregateArgs>): Prisma.PrismaPromise<GetScreenAggregateType<T>>

  /**
   * Group by Screen.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScreenGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ScreenGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ScreenGroupByArgs['orderBy'] }
      : { orderBy?: ScreenGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ScreenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScreenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Screen model
 */
readonly fields: ScreenFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Screen.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ScreenClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  project<T extends Prisma.ProjectDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProjectDefaultArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Screen model
 */
export interface ScreenFieldRefs {
  readonly id: Prisma.FieldRef<"Screen", 'String'>
  readonly projectId: Prisma.FieldRef<"Screen", 'String'>
  readonly name: Prisma.FieldRef<"Screen", 'String'>
  readonly type: Prisma.FieldRef<"Screen", 'DeviceType'>
  readonly width: Prisma.FieldRef<"Screen", 'Int'>
  readonly height: Prisma.FieldRef<"Screen", 'Int'>
  readonly x: Prisma.FieldRef<"Screen", 'Float'>
  readonly y: Prisma.FieldRef<"Screen", 'Float'>
  readonly imageUrl: Prisma.FieldRef<"Screen", 'String'>
  readonly route: Prisma.FieldRef<"Screen", 'String'>
  readonly component: Prisma.FieldRef<"Screen", 'String'>
  readonly isGenerated: Prisma.FieldRef<"Screen", 'Boolean'>
  readonly metadata: Prisma.FieldRef<"Screen", 'String'>
  readonly createdAt: Prisma.FieldRef<"Screen", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Screen", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Screen findUnique
 */
export type ScreenFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Screen
   */
  select?: Prisma.ScreenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Screen
   */
  omit?: Prisma.ScreenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreenInclude<ExtArgs> | null
  /**
   * Filter, which Screen to fetch.
   */
  where: Prisma.ScreenWhereUniqueInput
}

/**
 * Screen findUniqueOrThrow
 */
export type ScreenFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Screen
   */
  select?: Prisma.ScreenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Screen
   */
  omit?: Prisma.ScreenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreenInclude<ExtArgs> | null
  /**
   * Filter, which Screen to fetch.
   */
  where: Prisma.ScreenWhereUniqueInput
}

/**
 * Screen findFirst
 */
export type ScreenFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Screen
   */
  select?: Prisma.ScreenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Screen
   */
  omit?: Prisma.ScreenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreenInclude<ExtArgs> | null
  /**
   * Filter, which Screen to fetch.
   */
  where?: Prisma.ScreenWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Screens to fetch.
   */
  orderBy?: Prisma.ScreenOrderByWithRelationInput | Prisma.ScreenOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Screens.
   */
  cursor?: Prisma.ScreenWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Screens from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Screens.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Screens.
   */
  distinct?: Prisma.ScreenScalarFieldEnum | Prisma.ScreenScalarFieldEnum[]
}

/**
 * Screen findFirstOrThrow
 */
export type ScreenFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Screen
   */
  select?: Prisma.ScreenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Screen
   */
  omit?: Prisma.ScreenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreenInclude<ExtArgs> | null
  /**
   * Filter, which Screen to fetch.
   */
  where?: Prisma.ScreenWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Screens to fetch.
   */
  orderBy?: Prisma.ScreenOrderByWithRelationInput | Prisma.ScreenOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Screens.
   */
  cursor?: Prisma.ScreenWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Screens from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Screens.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Screens.
   */
  distinct?: Prisma.ScreenScalarFieldEnum | Prisma.ScreenScalarFieldEnum[]
}

/**
 * Screen findMany
 */
export type ScreenFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Screen
   */
  select?: Prisma.ScreenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Screen
   */
  omit?: Prisma.ScreenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreenInclude<ExtArgs> | null
  /**
   * Filter, which Screens to fetch.
   */
  where?: Prisma.ScreenWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Screens to fetch.
   */
  orderBy?: Prisma.ScreenOrderByWithRelationInput | Prisma.ScreenOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Screens.
   */
  cursor?: Prisma.ScreenWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Screens from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Screens.
   */
  skip?: number
  distinct?: Prisma.ScreenScalarFieldEnum | Prisma.ScreenScalarFieldEnum[]
}

/**
 * Screen create
 */
export type ScreenCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Screen
   */
  select?: Prisma.ScreenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Screen
   */
  omit?: Prisma.ScreenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreenInclude<ExtArgs> | null
  /**
   * The data needed to create a Screen.
   */
  data: Prisma.XOR<Prisma.ScreenCreateInput, Prisma.ScreenUncheckedCreateInput>
}

/**
 * Screen createMany
 */
export type ScreenCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Screens.
   */
  data: Prisma.ScreenCreateManyInput | Prisma.ScreenCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Screen createManyAndReturn
 */
export type ScreenCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Screen
   */
  select?: Prisma.ScreenSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Screen
   */
  omit?: Prisma.ScreenOmit<ExtArgs> | null
  /**
   * The data used to create many Screens.
   */
  data: Prisma.ScreenCreateManyInput | Prisma.ScreenCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreenIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Screen update
 */
export type ScreenUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Screen
   */
  select?: Prisma.ScreenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Screen
   */
  omit?: Prisma.ScreenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreenInclude<ExtArgs> | null
  /**
   * The data needed to update a Screen.
   */
  data: Prisma.XOR<Prisma.ScreenUpdateInput, Prisma.ScreenUncheckedUpdateInput>
  /**
   * Choose, which Screen to update.
   */
  where: Prisma.ScreenWhereUniqueInput
}

/**
 * Screen updateMany
 */
export type ScreenUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Screens.
   */
  data: Prisma.XOR<Prisma.ScreenUpdateManyMutationInput, Prisma.ScreenUncheckedUpdateManyInput>
  /**
   * Filter which Screens to update
   */
  where?: Prisma.ScreenWhereInput
  /**
   * Limit how many Screens to update.
   */
  limit?: number
}

/**
 * Screen updateManyAndReturn
 */
export type ScreenUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Screen
   */
  select?: Prisma.ScreenSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Screen
   */
  omit?: Prisma.ScreenOmit<ExtArgs> | null
  /**
   * The data used to update Screens.
   */
  data: Prisma.XOR<Prisma.ScreenUpdateManyMutationInput, Prisma.ScreenUncheckedUpdateManyInput>
  /**
   * Filter which Screens to update
   */
  where?: Prisma.ScreenWhereInput
  /**
   * Limit how many Screens to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreenIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Screen upsert
 */
export type ScreenUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Screen
   */
  select?: Prisma.ScreenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Screen
   */
  omit?: Prisma.ScreenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreenInclude<ExtArgs> | null
  /**
   * The filter to search for the Screen to update in case it exists.
   */
  where: Prisma.ScreenWhereUniqueInput
  /**
   * In case the Screen found by the `where` argument doesn't exist, create a new Screen with this data.
   */
  create: Prisma.XOR<Prisma.ScreenCreateInput, Prisma.ScreenUncheckedCreateInput>
  /**
   * In case the Screen was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ScreenUpdateInput, Prisma.ScreenUncheckedUpdateInput>
}

/**
 * Screen delete
 */
export type ScreenDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Screen
   */
  select?: Prisma.ScreenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Screen
   */
  omit?: Prisma.ScreenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreenInclude<ExtArgs> | null
  /**
   * Filter which Screen to delete.
   */
  where: Prisma.ScreenWhereUniqueInput
}

/**
 * Screen deleteMany
 */
export type ScreenDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Screens to delete
   */
  where?: Prisma.ScreenWhereInput
  /**
   * Limit how many Screens to delete.
   */
  limit?: number
}

/**
 * Screen without action
 */
export type ScreenDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Screen
   */
  select?: Prisma.ScreenSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Screen
   */
  omit?: Prisma.ScreenOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScreenInclude<ExtArgs> | null
}
