generator client {
  provider = "prisma-client"
  output   = "../generated"
  moduleFormat = "esm"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  avatar    String?
  plan      Plan     @default(FREE)
  credits   Int      @default(50)
  maxCredits Int     @default(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects  Project[]
  sessions  Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  prompt      String        @db.Text
  status      ProjectStatus @default(DRAFT)
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  generations Generation[]
  screens    Screen[]
  messages   ChatMessage[]

  @@map("projects")
}

model Generation {
  id          String           @id @default(cuid())
  projectId   String
  status      GenerationStatus @default(PENDING)
  progress    Int              @default(0)
  currentStep String?
  totalSteps  Int              @default(0)
  startedAt   DateTime?
  completedAt DateTime?
  errorMsg    String?          @db.Text
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  project Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  steps   GenerationStep[]

  @@map("generations")
}

model GenerationStep {
  id           String   @id @default(cuid())
  generationId String
  name         String
  description  String   @db.Text
  type         StepType
  status       StepStatus @default(PENDING)
  progress     Int      @default(0)
  order        Int
  startedAt    DateTime?
  completedAt  DateTime?
  errorMsg     String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  generation Generation @relation(fields: [generationId], references: [id], onDelete: Cascade)

  @@map("generation_steps")
}

model Screen {
  id          String     @id @default(cuid())
  projectId   String
  name        String
  type        DeviceType
  width       Int
  height      Int
  x           Float
  y           Float
  imageUrl    String?
  route       String?
  component   String?
  isGenerated Boolean    @default(false)
  metadata    String?    @db.Text // Stores JSON with code, files, etc.
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("screens")
}

model ChatMessage {
  id        String      @id @default(cuid())
  projectId String
  role      MessageRole
  content   String      @db.Text
  createdAt DateTime    @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

// Enums
enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum ProjectStatus {
  DRAFT
  GENERATING
  COMPLETED
  ERROR
}

enum GenerationStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum StepStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  SKIPPED
}

enum StepType {
  CODE
  SCREEN
  SETUP
  OPTIMIZATION
}

enum DeviceType {
  DESKTOP
  TABLET
  MOBILE
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}
